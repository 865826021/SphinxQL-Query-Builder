{"google":"","tagline":"A SphinxQL query builder for any PHP 5.3+ project, composer compatible.","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Query Builder for SphinxQL\r\n==========================\r\n\r\n### About\r\n\r\nThis is a PHP Query Builder created ad-hoc to work with SphinxQL, an SQL dialect to use with the Sphinx search engine. \r\nIt maps every function listed in the [SphinxQL reference](http://sphinxsearch.com/docs/current.html#sphinxql-reference) and is generally [faster](http://sphinxsearch.com/blog/2010/04/25/sphinxapi-vs-sphinxql-benchmark/) than the Sphinx API, beside having more functions.\r\n\r\nThis Query Builder has no dependencies except PHP 5.3, `\\MySQLi` and of course a working Sphinx server. FuelPHP is not necessary but we've added a bootstrap for using it as a Package. It is styled after FuelPHP's Query Builder.\r\n\r\n__This package is BETA QUALITY.__ Don't rely on it in production unless you tested it massively in development.\r\n\r\n### Code Quality\r\n\r\nMost of the methods in the package are unit tested. Methods that haven't been tested are single queries like `flushRtIndex`, but as they are independent they are supposed to work.\r\n\r\nWe test on Travis-CI with the SVN build of Sphinx: [![Build Status](https://secure.travis-ci.org/FoolRulez/fuel-sphinxql.png)](http://travis-ci.org/FoolRulez/fuel-sphinxql)\r\n\r\n## Usage\r\n\r\nThe examples will omit the namespace.\r\n\r\n\tuse Foolz\\Sphinxql\\Sphinxql as Sphinxql;\r\n\r\n\t// if you don't use the Sphinxql default connection, use this function to change the host and port\r\n\tSphinxql::addConnection('superspecial', 'yourhost.com', 9231);\r\n\tSphinxql::setConnection('superspecial');\r\n\t\r\n\t$query = Sphinxql::select('column_one', 'column_two')\r\n\t\t->from('index_delta', 'index_main', 'index_ancient')\r\n\t\t->match('comment', 'my opinion is better')\r\n\t\t->where('banned', '=', 1);\r\n\r\n\t$result = $query->execute();\r\n\r\n\r\n#### General\r\n\r\nThe static connection manager lets you handle multiple connections.\r\n\r\nThere's the `default` connection, that connects to 127.0.0.1:9306 as per SphinxQL defaults.\r\n\r\n* __Sphinxql::silenceConnectionWarning($enable = true)__\r\n\t\r\n\tUse it when you have warning display enabled in PHP, but you don't want to see errors when MySQLi fails connecting to the server. Custom errors are in place. (This is actually the so-evil @ silencing. Use it if you know what are you doing.)\r\n\r\n\t_Disabled by default._\r\n\r\n* __Sphinxql::addConnection($name = 'default', $host = '127.0.0.1', $port = 9306)__\r\n\r\n\tUse it to add connection to the array of available connections.\r\n\r\n* __Sphinxql::setConnection($name)__\r\n\r\n\tSet the connection to be used for the next operations. Remember that the class always starts with `default` set.\r\n\r\n* __Sphinxql::getConnectionInfo($name = null)__\r\n\r\n\tGet info (host, port) on the connection. When name is not specified it gives info on the currently selected connection.\r\n\r\n* __Sphinxql::connect()__\r\n\r\n\t_Throws \\Foolz\\Sphinxql\\SphinxqlConnectionException_\r\n\r\n\tEnstablish the connection to the server.\r\n\r\n* __Sphinxql::getConnection()__\r\n\r\n\t_Throws \\Foolz\\Sphinxql\\SphinxqlConnectionException_\r\n\r\n\tReturns the \\MySQLi object of the currently selected connection, an exception if not available.\r\n\r\n* __Sphinxql::query($query)__\r\n\r\n\tRuns the query. Returns an array of results on `SELECT`, or an array with the number of affected rows (Sphinx doesn't support last-insert-id, so this values for `INSERT` too).\r\n\r\n\r\n#### Getting around escaping\r\n\r\nOften you need to run SQL functions, but those would get escaped as other values or identifiers. You can ignore the escaping by wrapping the query in a SphinxqlExpression.\r\n\r\n* __Sphinxql::expr($string)__\r\n\r\n\tDisables escaping for the string.\r\n\r\n\r\n#### Executing and Compiling\r\n\r\n* __$sq->execute()__\r\n\r\n\tCompiles the query, executes it, and __returns__ the array of results.\r\n\r\n* __$sq->compile()__\r\n\r\n\tCompiles the query.\r\n\r\n* __$sq->getCompiled()__\r\n\r\n\tReturns the last compiled query.\r\n\r\n* __$sq->getCompiled()__\r\n\r\n\tReturns the last result.\r\n\r\n#### Select\r\n\r\n* __$sq = Sphinxql::select($column1, $column2, $column3)->from($index1, $index2, $index3)__\r\n\r\n\tStarts a `SELECT`. `$columns1` can be an array. If no column is specified it defaults to `*`. `$index1` can be an array.\r\n\r\nThe options for the select follow.\r\n\r\n#### Where\r\n\r\n* $sq->where($column, $operator, $value)\r\n\r\n\tClassic WHERE, works with Sphinx filters and fulltext. \r\n\r\n\t\t$sq->where('column', 'value');\r\n\t\t// WHERE `column` = 'value'\r\n\r\n\t\t$sq->where('column', '=', 'value');\r\n\t\t// WHERE `column` = 'value'\r\n\r\n\t\t$sq->where('column', '>=', 'value')\r\n\t\t// WHERE `column` >= 'value'\r\n\r\n\t\t$sq->where('column', 'IN', array('value1', 'value2', 'value3'));\r\n\t\t// WHERE `column` IN ('value1', 'value2', 'value3')\r\n\r\n\t\t$sq->where('column', 'BETWEEN', array('value1', 'value2'))\r\n\t\t// WHERE `column` BETWEEN 'value1' AND 'value2'\r\n\t\t// WHERE `example` BETWEEN 10 AND 100\r\n\r\n\t_While implemented in the package, `OR` and parenthesis are not yet implemented in SphinxQL_.\r\n\r\n\r\n#### Match\r\n\r\n* __$sq->match($column, $value, $half = false)__\r\n\r\n\tSearch in full-text fields. Can be used multiple times in the same query.\r\n\r\n\t\t$sq->match('title', 'Otoshimono')\r\n\t\t\t->match('character', 'Nymph');\r\n\r\n\tThe characters are fully escaped. You will need to use Sphinxql::expr($value) to use your own options. \r\n\t\r\n\tThe `$half`, if turned to `true`, will allow the following characters: `-`, `|`, `\"`. You __will have to__ wrap the query in a `try` if you use this feature and expose it to public interfaces, because character order might throw a query error.\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\t$result Sphinxql::select()\r\n\t\t\t\t->from('rt')\r\n\t\t\t\t->match('title', 'Sora no || Otoshimono')\r\n\t\t\t\t->execute();\r\n\t\t}\r\n\t\tcatch (\\Foolz\\Sphinxql\\SphinxqlDatabaseException $e)\r\n\t\t{\r\n\t\t\t// it will get here because two `|` one after the other aren't allowed\r\n\t\t}\r\n\r\n#### Grouping, ordering etc.\r\n \r\n* __$sq->groupBy($column)__\r\n\r\n\t`GROUP BY $column`\r\n\r\n* __$sq->withinGroupOrderBy($column, $direction = null)__\r\n\r\n\t`WITHIN GROUP ORDER BY $column [$direction]`\r\n\r\n\tDirection can be omitted with `null`, or be `asc` or `desc` case insensitive.\r\n\r\n* __$sq->orderBy($column, $direction = null)__\r\n\r\n\t`ORDER BY $column [$direction]`\r\n\r\n\tDirection can be omitted with `null`, or be `asc` or `desc` case insensitive.\r\n\r\n* __$sq->offset($offset)__\r\n\r\n\t`LIMIT $offset, 9999999999999`\r\n\r\n\tSet the offset. The `LIMIT` is set to a high number because SphinxQL doesn't support the `OFFSET` keyword.\r\n\r\n* __$sq->limit($limit)__\r\n\r\n\t`LIMIT $limit`\r\n\r\n* __$sq->limit($offset, $limit)__\r\n\r\n\t`LIMIT $offset, $limit`\r\n\r\n* __$sq->option($name, $value)__\r\n\r\n\t`OPTION $name = $value`\r\n\r\n\tSet a SphinxQL option like `max_matches` or `reverse_scan` for this query only.\r\n\r\n#### Insert and Replace\r\n\r\nWill return an array with an `INT` as first member, the number of rows inserted/replaced.\r\n\r\n* __$sq = Sphinxql::insert()->into($index)__\r\n\r\n\tBegins an `INSERT`.\r\n\r\n* __$sq = Sphinxql::replace()->into($index)__\r\n\r\n\tBegins an `REPLACE`.\r\n\r\n* __$sq->set($associative_array)__\r\n\r\n\tInserts the associative array, where the keys are the columns and the respective values are the column values.\r\n\r\n* __$sq->value($column1, $value1)->value($column2, $value2)->value($column3, $value3)__\r\n\r\n\tSets columns one by one\r\n\r\n* __$sq->columns($column1, $column2, $column3)->values($value1, $value2, $value3)->values($value11, $value22, $value33)__\r\n\r\n\tAllows inserting multiple arrays of values in the specified columns.\r\n\r\n\t`$column1` and `$value1` can be arrays.\r\n\r\n\r\n#### Update\r\n\r\nWill return an array with an `INT` as first member, the number of rows updated.\r\n\r\n* __$sq = Sphinxql::update($index)__\r\n\r\n\tBegins an `UPDATE`.\r\n\r\n* __$sq->value($column1, $value1)->value($column2, $value2)__\r\n\r\n\tUpdates the selected columns with the respective value.\r\n\r\n* __$sq->set($associative_array)__\r\n\r\n\tInserts the associative array, where the keys are the columns and the respective values are the column values.\t\r\n\r\nThe `WHERE` part of the query works just as for `SELECT`.\r\n\r\n\r\n#### Delete\r\n\r\nWill return an array with an `INT` as first member, the number of rows deleted.\r\n\r\n* __$sq = Sphinxql::delete()->from($column)__\r\n\r\n\tBegins a `DELETE`.\r\n\r\nThe `WHERE` part of the query works just as for `SELECT`.\r\n\r\n\r\n#### Transactions\r\n\r\n* __Sphinxql::transactionBegin()__\r\n\r\n\tBegins a transaction.\r\n\r\n* __Sphinxql::transactionCommit()__\r\n\r\n\tCommits a transaction.\r\n\r\n* __Sphinxql::transactionRollback()__\r\n\r\n\tRollbacks a transaction.\r\n\r\n\r\n#### Escaping\r\n\r\n* __$sq->escape($value)__\r\n\r\n\tReturns the escaped value, processed with `\\MySQLi::real_escape_string`.\r\n\r\n* __$sq->quoteIdentifier($identifier)__\r\n\r\n\tAdds oblique quotes to identifiers. To run this on array elements use `$sq->quoteIdentifierArr($arr)`.\r\n\r\n* __$sq->quote($value)__\r\n\r\n\tAdds quotes to values and escapes. To run this on array elements use `$sq->quoteArr($arr)`.\r\n\r\n* __$sq->escapeMatch($value)__\r\n\r\n\tEscapes the string for use in a `MATCH`.\r\n\r\n* __$sq->halfEscapeMatch($value)__\r\n\r\n\tEscapes the string for use in a `MATCH`. Allows `-`, `|`, `\"`. Read about this on the `$sq->match()` explanation.\r\n\r\n\r\n#### Show\r\n\r\n\tSphinxql::meta() => 'SHOW META'\r\n\tSphinxql::warnings() => 'SHOW WARNINGS'\r\n\tSphinxql::status() => 'SHOW STATUS'\r\n\tSphinxql::tables() => 'SHOW TABLES'\r\n\tSphinxql::variables() => 'SHOW VARIABLES'\r\n\tSphinxql::variablesSession() => 'SHOW SESSION VARIABLES'\r\n\tSphinxql::variablesGlobal() => 'SHOW GLOBAL VARIABLES'\r\n\r\n\r\n#### Set variable\r\n\r\n* __Sphinxql::setVariable($name, $value, $global = false)__\r\n\r\n\tSet a server variable.\r\n\r\n\r\n#### More\r\n\r\nThere's several more functions to complete the SphinxQL library:\r\n\r\n* `Sphinxql::callSnippets($data, $index, $extra = array())`\r\n* `Sphinxql::callKeywords($text, $index, $hits = null)`\r\n* `Sphinxql::describe($index)`\r\n* `Sphinxql::createFunction($udf_name, $returns, $soname)`\r\n* `Sphinxql::dropFunction($udf_name)`\r\n* `Sphinxql::attachIndex($disk_index, $rt_index)`\r\n* `Sphinxql::flushRtIndex($index)`","name":"SphinxQL Query Builder for PHP"}