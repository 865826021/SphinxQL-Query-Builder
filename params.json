{"name":"SphinxQL Query Builder for PHP","tagline":"A SphinxQL query builder for any PHP 5.3+ project, composer compatible.","body":"Query Builder for SphinxQL\r\n==========================\r\n\r\n## About\r\n\r\nThis is a SphinxQL Query Builder used to work with SphinxQL, a SQL dialect used with the Sphinx search engine. It maps most of the functions listed in the [SphinxQL reference](http://sphinxsearch.com/docs/current.html#SphinxQL-reference) and is generally [faster](http://sphinxsearch.com/blog/2010/04/25/sphinxapi-vs-SphinxQL-benchmark/) than the available Sphinx API.\r\n\r\nThis Query Builder has no dependencies besides PHP 5.3, `\\MySQLi` extension, and [Sphinx](http://sphinxsearch.com).\r\n\r\n__This package is BETA QUALITY.__ It is recommended that you do extensive testing in development before using it in a production environment.\r\n\r\n### Missing methods?\r\n\r\nSphinxQL evolves very fast.\r\n\r\nMost of the new functions are static one liners like `SHOW PLUGINS`. We'll avoid trying to keep up with these methods, as they are easy to just call directly (`SphinxQL::create($conn)->query($sql)->execute()`). You're free to submit pull requests to support these methods.\r\n\r\nIf any feature is unreachable through this library, open a new issue or send a pull request.\r\n\r\n## Code Quality\r\n\r\nThe majority of the methods in the package have been unit tested. The only methods that have not been tested are single queries such as `flushRtIndex`, but these are independent and should work fine.\r\n\r\nWe have tested our package locally and remotely with Travis-CI:\r\n\r\n[![Build Status](https://travis-ci.org/FoolCode/SphinxQL-Query-Builder.png)](https://travis-ci.org/FoolCode/SphinxQL-Query-Builder)\r\n\r\n## How to Contribute\r\n\r\n### Pull Requests\r\n\r\n1. Fork the SphinxQL Query Builder repository\r\n2. Create a new branch for each feature or improvement\r\n3. Submit a pull request from each branch to the **dev** branch\r\n\r\nIt is very important to separate new features or improvements into separate feature branches, and to send a pull\r\nrequest for each branch. This allows me to review and pull in new features or improvements individually.\r\n\r\n### Style Guide\r\n\r\nAll pull requests must adhere to the [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) standard.\r\n\r\n### Unit Testing\r\n\r\nAll pull requests must be accompanied by passing unit tests and complete code coverage. The SphinxQL Query Builder uses\r\n`phpunit` for testing.\r\n\r\n[Learn about PHPUnit](https://github.com/sebastianbergmann/phpunit/)\r\n\r\n## Installation\r\n\r\nThis is a Composer package. You can install this package with the following command: `php composer.phar install`\r\n\r\n## Usage\r\n\r\nThe following examples will omit the namespace.\r\n\r\n```php\r\n<?php\r\nuse Foolz\\SphinxQL\\SphinxQL;\r\nuse Foolz\\SphinxQL\\Connection;\r\n\r\n// create a SphinxQL Connection object to use with SphinxQL\r\n$conn = new Connection();\r\n$conn->setConnectionParams('domain.tld', 9306);\r\n\r\n$query = SphinxQL::create($conn)->select('column_one', 'colume_two')\r\n    ->from('index_delta', 'index_main', 'index_ancient')\r\n    ->match('comment', 'my opinion is superior to yours')\r\n    ->where('banned', '=', 1);\r\n\r\n$result = $query->execute();\r\n```\r\n\r\n### Connection\r\n\r\n* __$conn = new Connection()__\r\n\r\n\tCreate a new Connection instance to be used with the following methods or SphinxQL class.\r\n\r\n* __$conn->silenceConnectionWarning($enable = true)__\r\n\r\n\tSuppresses any warnings and errors displayed by the `\\MySQLi` extension upon connection failure.\r\n\t_This is disabled by default._\r\n\r\n* __$conn->setConnectionParams($host = '127.0.0.1', $port = 9306)__\r\n\r\n\tSets the connection parameters used to establish a connection to the server.\r\n\r\n* __$conn->query($query)__\r\n\r\n\tPerforms the query on the server. Returns an _array_ of results for `SELECT`, or an _int_ with the number of rows affected.\r\n\r\n_More methods are available in the Connection class, but usually not necessary as these are handled automatically._\r\n\r\n### SphinxQL\r\n\r\n* __SphinxQL::create($conn)__\r\n\r\n\tCreates a SphinxQL instance used for generating queries.\r\n\r\n#### Bypass Query Escaping\r\n\r\nOften, you would need to call and run SQL functions that shouldn't be escaped in the query. You can bypass the query escape by wrapping the query in an `\\Expression`.\r\n\r\n* __SphinxQL::expr($string)__\r\n\r\n\tReturns the string without being escaped.\r\n\r\n#### Query Escaping\r\n\r\nThere are cases when an input __must__ be escaped in the SQL statement. The following functions are used to handle any escaping required for the query.\r\n\r\n* __$sq->escape($value)__\r\n\r\n\tReturns the escaped value. This is processed with the `\\MySQLi::real_escape_string()` function.\r\n\r\n* __$sq->quoteIdentifier($identifier)__\r\n\r\n\tAdds backtick quotes to the identifier. For array elements, use `$sq->quoteIdentifierArray($arr)`.\r\n\r\n* __$sq->quote($value)__\r\n\r\n\tAdds quotes to the value and escapes it. For array elements, use `$sq->quoteArr($arr)`.\r\n\r\n* __$sq->escapeMatch($value)__\r\n\r\n\tEscapes the string to be used in `MATCH`.\r\n\r\n* __$sq->halfEscapeMatch($value)__\r\n\r\n\tEscapes the string to be used in `MATCH`. The following characters are allowed: `-`, `|`, and `\"`.\r\n\r\n\t_Refer to `$sq->match()` for more information._\r\n\r\n#### SELECT\r\n\r\n* __$sq = SphinxQL::create($conn)->select($column1, $column2, ...)->from($index1, $index2, ...)__\r\n\r\n\tBegins a `SELECT` query statement. If no column is specified, the statement defaults to using `*`. Both `$column1` and `$index1` can be arrays.\r\n\r\n#### INSERT, REPLACE\r\n\r\nThis will return an `INT` with the number of rows affected.\r\n\r\n* __$sq = SphinxQL::create($conn)->insert()->into($index)__\r\n\r\n\tBegins an `INSERT`.\r\n\r\n* __$sq = SphinxQL::create($conn)->replace()->into($index)__\r\n\r\n\tBegins an `REPLACE`.\r\n\r\n* __$sq->set($associative_array)__\r\n\r\n\tInserts an associative array, with the keys as the columns and values as the value for the respective column.\r\n\r\n* __$sq->value($column1, $value1)->value($column2, $value2)->value($column3, $value3)__\r\n\r\n\tSets the value of each column individually.\r\n\r\n* __$sq->columns($column1, $column2, $column3)->values($value1, $value2, $value3)->values($value11, $value22, $value33)__\r\n\r\n\tAllows the insertion of multiple arrays of values in the specified columns.\r\n\r\n\tBoth `$column1` and `$index1` can be arrays.\r\n\r\n#### UPDATE\r\n\r\nThis will return an `INT` with the number of rows affected.\r\n\r\n* __$sq = SphinxQL::create($conn)->update($index)__\r\n\r\n\tBegins an `UPDATE`.\r\n\r\n* __$sq->value($column1, $value1)->value($column2, $value2)__\r\n\r\n\tUpdates the selected columns with the respective value.\r\n\r\n* __$sq->set($associative_array)__\r\n\r\n\tInserts the associative array, where the keys are the columns and the respective values are the column values.\r\n\r\n#### DELETE\r\n\r\nWill return an array with an `INT` as first member, the number of rows deleted.\r\n\r\n* __$sq = SphinxQL::create($conn)->delete()->from($column)__\r\n\r\n\tBegins a `DELETE`.\r\n\r\n#### WHERE\r\n\r\n* __$sq->where($column, $operator, $value)__\r\n\r\n\tStandard WHERE, extended to work with Sphinx filters and full-text.\r\n\r\n    ```php\r\n    <?php\r\n    // WHERE `column` = 'value'\r\n    $sq->where('column', 'value');\r\n\r\n    // WHERE `column` = 'value'\r\n    $sq->where('column', '=', 'value');\r\n\r\n    // WHERE `column` >= 'value'\r\n    $sq->where('column', '>=', 'value')\r\n\r\n    // WHERE `column` IN ('value1', 'value2', 'value3')\r\n    $sq->where('column', 'IN', array('value1', 'value2', 'value3'));\r\n\r\n    // WHERE `column` BETWEEN 'value1' AND 'value2'\r\n    // WHERE `example` BETWEEN 10 AND 100\r\n    $sq->where('column', 'BETWEEN', array('value1', 'value2'))\r\n\t```\r\n\r\n\t_It should be noted that `OR` and parenthesis are not supported and implemented in the SphinxQL dialect yet._\r\n\r\n#### MATCH\r\n\r\n* __$sq->match($column, $value, $half = false)__\r\n\r\n\tSearch in full-text fields. Can be used multiple times in the same query. Column can be an array. Value can be an Expression to bypass escaping (and use your own custom solution).\r\n\r\n    ```php\r\n    <?php\r\n    $sq->match('title', 'Otoshimono')\r\n        ->match('character', 'Nymph')\r\n        ->match(array('hates', 'despises'), 'Oregano');\r\n    ```\r\n\r\n\tBy default, all inputs are fully escaped. The usage of `SphinxQL::expr($value)` is required to bypass the statement escapes.\r\n\r\n\tThe `$half` argument, if set to `true`, will not escape and allow the usage of the following characters: `-`, `|`, `\"`. If you plan to use this feature and expose it to public interfaces, it is __recommended__ that you wrap the query in a `try catch` block as the character order may `throw` a query error.\r\n\r\n    ```php\r\n    <?php\r\n    try\r\n    {\r\n        $result = SphinxQL::create($conn)->select()\r\n            ->from('rt')\r\n            ->match('title', 'Sora no || Otoshimono', true)\r\n            ->match('loves', SphinxQL:expr(custom_escaping_fn('(you | me)')));\r\n            ->execute();\r\n    }\r\n    catch (\\Foolz\\SphinxQL\\DatabaseException $e)\r\n    {\r\n        // an error is thrown because two `|` one after the other aren't allowed\r\n    }\r\n\t```\r\n\r\n#### GROUP, WITHIN GROUP, ORDER, OFFSET, LIMIT, OPTION\r\n\r\n* __$sq->groupBy($column)__\r\n\r\n\t`GROUP BY $column`\r\n\r\n* __$sq->withinGroupOrderBy($column, $direction = null)__\r\n\r\n\t`WITHIN GROUP ORDER BY $column [$direction]`\r\n\r\n\tDirection can be omitted with `null`, or be `ASC` or `DESC` case insensitive.\r\n\r\n* __$sq->orderBy($column, $direction = null)__\r\n\r\n\t`ORDER BY $column [$direction]`\r\n\r\n\tDirection can be omitted with `null`, or be `ASC` or `DESC` case insensitive.\r\n\r\n* __$sq->offset($offset)__\r\n\r\n\t`LIMIT $offset, 9999999999999`\r\n\r\n\tSet the offset. Since SphinxQL doesn't support the `OFFSET` keyword, `LIMIT` has been set at an extremely high number.\r\n\r\n* __$sq->limit($limit)__\r\n\r\n\t`LIMIT $limit`\r\n\r\n* __$sq->limit($offset, $limit)__\r\n\r\n\t`LIMIT $offset, $limit`\r\n\r\n* __$sq->option($name, $value)__\r\n\r\n\t`OPTION $name = $value`\r\n\r\n\tSet a SphinxQL option such as `max_matches` or `reverse_scan` for the query.\r\n\r\n#### TRANSACTION\r\n\r\n* __SphinxQL::create($conn)->transactionBegin()__\r\n\r\n\tBegins a transaction.\r\n\r\n* __SphinxQL::create($conn)->transactionCommit()__\r\n\r\n\tCommits a transaction.\r\n\r\n* __SphinxQL::create($conn)->transactionRollback()__\r\n\r\n\tRollbacks a transaction.\r\n\r\n#### Executing and Compiling\r\n\r\n* __$sq->execute()__\r\n\r\n\tCompiles, executes, and __returns__ an array of results of a query.\r\n\r\n* __$sq->executeBatch()__\r\n\r\n\tCompiles, executes, and __returns__ an array of results for a multi-query.\r\n\r\n* __$sq->compile()__\r\n\r\n\tCompiles the query.\r\n\r\n* __$sq->getCompiled()__\r\n\r\n\tReturns the last query compiled.\r\n\r\n* __$sq->getResult()__\r\n\r\n\tReturns the last result.\r\n\r\n#### Multi-Query\r\n\r\n* __$sq->enqueue(SphinxQL $next = null)__\r\n\r\n\tQueues the query. If a $next is provided, $next is appended and returned, otherwise a new SphinxQL object is returned.\r\n\r\n* __$sq->executeBatch()__\r\n\r\n\tReturns an array of the results of all the queued queries.\r\n\r\n```php\r\n<?php\r\n$result = SphinxQL::create($this->conn)\r\n    ->select()\r\n    ->from('rt')\r\n    ->match('title', 'sora')\r\n    ->enqueue(SphinxQL::create($this->conn)->query('SHOW META')) // this returns the object with SHOW META query\r\n    ->enqueue() // this returns a new object\r\n    ->select()\r\n    ->from('rt')\r\n    ->match('content', 'nymph')\r\n    ->executeBatch();\r\n```\r\n\r\n`$result[0]` will contain the first select. `result[1]` will contain the META for the first query. `result[2]` will contain the second select.\r\n\r\n### Helper\r\n\r\nThe `Helper` class contains useful methods that don't need \"query building\".\r\n\r\nRemember to `->execute()` to get a result.\r\n\r\n* __Helper::pairsToAssoc($result)__\r\n\r\n\tTakes the pairs from a SHOW command and returns an associative array key=>value\r\n\r\nThe following methods return a prepared `SphinxQL` object. You can also use `->enqueue($next_object)`:\r\n\r\n```php\r\n<?php\r\n$result = SphinxQL::create($this->conn)\r\n    ->select()\r\n    ->from('rt')\r\n    ->where('gid', 9003)\r\n    ->enqueue(Helper::create($this->conn)->showMeta()) // this returns the object with SHOW META query prepared\r\n    ->enqueue() // this returns a new object\r\n    ->select()\r\n    ->from('rt')\r\n    ->where('gid', 201)\r\n    ->executeBatch();\r\n```\r\n\r\n* `Helper::create($conn)->showMeta() => 'SHOW META'`\r\n* `Helper::create($conn)->showWarnings() => 'SHOW WARNINGS'`\r\n* `Helper::create($conn)->showStatus() => 'SHOW STATUS'`\r\n* `Helper::create($conn)->shotTables() => 'SHOW TABLES'`\r\n* `Helper::create($conn)->showVariables() => 'SHOW VARIABLES'`\r\n* `Helper::create($conn)->showSessionVariables() => 'SHOW SESSION VARIABLES'`\r\n* `Helper::create($conn)->showGlobalVariables() => 'SHOW GLOBAL VARIABLES'`\r\n* `Helper::create($conn)->setVariable($name, $value, $global = false)`\r\n* `Helper::create($conn)->callSnippets($data, $index, $extra = array())`\r\n* `Helper::create($conn)->callKeywords($text, $index, $hits = null)`\r\n* `Helper::create($conn)->describe($index)`\r\n* `Helper::create($conn)->createFunction($udf_name, $returns, $soname)`\r\n* `Helper::create($conn)->dropFunction($udf_name)`\r\n* `Helper::create($conn)->attachIndex($disk_index, $rt_index)`\r\n* `Helper::create($conn)->flushRtIndex($index)`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}